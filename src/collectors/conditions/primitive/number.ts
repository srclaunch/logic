import { Condition } from '../index';

export enum NumberCondition {
  IsAfter = Condition.IsAfter,
  IsAfterOrEqual = Condition.IsAfterOrEqual,
  IsBefore = Condition.IsBefore,
  IsBeforeOrEqual = Condition.IsBeforeOrEqual,
  IsBetween = Condition.IsBetween,
  IsDecimal = Condition.IsDecimal,
  IsDivisibleBy = Condition.IsDivisibleBy,
  IsEAN = Condition.IsEAN,
  IsEIN = Condition.IsEIN,
  IsEqual = Condition.IsEqual,
  IsEvenNumber = Condition.IsEvenNumber,
  IsFloat = Condition.IsFloat,
  IsGreaterThan = Condition.IsGreaterThan,
  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,
  IsInt = Condition.IsInteger,
  IsISBN = Condition.IsISBN,
  IsISMN = Condition.IsISMN,
  IsISSN = Condition.IsISSN,
  IsLatitude = Condition.IsLatitude,
  IsLongitude = Condition.IsLongitude,
  IsLessThan = Condition.IsLessThan,
  IsLessThanOrEqual = Condition.IsLessThanOrEqual,
  IsMACAddress = Condition.IsMACAddress,
  IsNumber = Condition.IsNumber,
  IsNegativeNumber = Condition.IsNegativeNumber,
  IsNotEqual = Condition.IsNotEqual,
  IsNotNull = Condition.IsNotNull,
  IsOddNumber = Condition.IsOddNumber,
  IsPassportNumber = Condition.IsPassportNumber,
  IsPhoneNumber = Condition.IsPhoneNumber,
  IsPort = Condition.IsPort,
  IsPositiveNumber = Condition.IsPositiveNumber,
  IsPostalCode = Condition.IsPostalCode,
  IsSemanticVersion = Condition.IsSemanticVersion,
  IsSSN = Condition.IsSSN,
  IsTaxIDNumber = Condition.IsTaxIDNumber,
  IsUUID = Condition.IsUUID,
  IsVATIDNumber = Condition.IsVATIDNumber,
}

export enum FloatCondition {
  IsEqual = Condition.IsEqual,
  IsFloat = Condition.IsFloat,
  IsGreaterThan = Condition.IsGreaterThan,
  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,
  IsLessThan = Condition.IsLessThan,
  IsLessThanOrEqual = Condition.IsLessThanOrEqual,
  IsNotEqual = Condition.IsNotEqual,
  IsNotNull = Condition.IsNotNull,
  IsNumber = Condition.IsNumber,
  IsNumeric = Condition.IsNumeric,
}

export enum IntegerCondition {
  IsEqual = Condition.IsEqual,
  IsInteger = Condition.IsInteger,
  IsGreaterThan = Condition.IsGreaterThan,
  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,
  IsLessThan = Condition.IsLessThan,
  IsLessThanOrEqual = Condition.IsLessThanOrEqual,
  IsNotEqual = Condition.IsNotEqual,
  IsNotNull = Condition.IsNotNull,
  IsNumber = Condition.IsNumber,
  IsNumeric = Condition.IsNumeric,
}
